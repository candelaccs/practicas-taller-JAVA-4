Queremos representar a los empleados de un club: jugadores y entrenadores.
 Cualquier empleado se caracteriza por su nombre, sueldo básico y antigüedad.
 Los jugadores son empleados que se caracterizan por el número de partidos jugados y
el número de goles anotados.
 Los entrenadores son empleados que se caracterizan por la cantidad de campeonatos
ganados.
A- Implemente la jerarquía de clases declarando atributos, métodos para
obtener/modificar su valor y constructores que reciban los datos necesarios.
B- Cualquier empleado debe responder al mensaje calcularEfectividad. La efectividad
del entrenador es el promedio de campeonatos ganados por año de antigüedad, mientras
que la del jugador es el promedio de goles por partido.
C- Cualquier empleado debe responder al mensaje calcularSueldoACobrar. El sueldo a
cobrar es el sueldo básico más un 10% del básico por cada año de antigüedad y además:
 Para los jugadores: si el promedio de goles por partido es superior a 0,5 se adiciona un
plus de otro sueldo básico.
 Para los entrenadores: se adiciona un plus por campeonatos ganados (5000$ si ha
ganado entre 1 y 4 campeonatos; $30.000 si ha ganado entre 5 y 10 campeonatos;
50.000$ si ha ganado más de 10 campeonatos).
D- Cualquier empleado debe responder al mensaje toString, que devuelve un String que
lo representa, compuesto por nombre, sueldo a cobrar y efectividad.
F- Realizar un programa que instancie un jugador y un entrenador. Informe la
representación String de cada uno.
NOTA: para cada método a implementar piense en que clase/s debe definir el método.


clase empleados

public abstract class Empleados {
    
    private String nombre;
    private double sueldo;
    private int    antiguedad;
    
    
    public Empleados (String nom, double sue, int antic){
        
        setNombre (nom);
        setSueldo (sue);
        setAntiguedad (antic);
    } 

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public double getSueldo() {
        return sueldo;
    }

    public void setSueldo(double sueldo) {
        this.sueldo = sueldo;
    }

    public int getAntiguedad() {
        return antiguedad;
    }

    public void setAntiguedad(int antiguedad) {
        this.antiguedad = antiguedad;
    }
    
    public abstract double calcularEfectividad();
    
    public double calcularSueldoACobrar (){
        
        return getSueldo() + ((getSueldo()*10/100)* getAntiguedad() + this.plusSueldo()); // en el this, se referencia a si mismo en la clase en la que se esta ejecutando //
    }

    @Override
    public String toString() {
        return  "nombre del empleado: " + nombre; 
    }

    public abstract double plusSueldo();
    
    
}

clase jugador

public class Jugador extends Empleados {
    
    private int goles;
    private int partidos;
    
    public Jugador (String nombre, double sueldo, int antiguedad, int goles, int partidos){
        
        super (nombre, sueldo, antiguedad);
        setGoles (goles);
        setPartidos (partidos);
    }

    public int getGoles() {
        return goles;
    }

    public void setGoles(int goles) {
        this.goles = goles;
    }

    public int getPartidos() {
        return partidos;
    }

    public void setPartidos(int partidos) {
        this.partidos = partidos;
    }
    
    
    /*public double calcularEfectividad (){
        
        return (double)getGoles()/getPartidos(); // solo con el double me funciona //
    }*/
    
    public double calcularEfectividad () {
        
        double aux = (getGoles ()/ getPartidos());
        return aux;
    }
    
    public double plusSueldo (){ 
        
        double aux;
        
        if ( calcularEfectividad () > 0.5) 
            aux = getSueldo(); // en el caso de que supere la efectividad se le manda este nuevo sueldo y suma el basico de calcular sueldo a cobrar
        else
            aux = 0;
        
        return aux;
          
    }

    @Override
    public String toString() {
        return "Jugador " + super.toString() + " el salario es " + super.calcularSueldoACobrar() + " su efectividad es de  " + calcularEfectividad();
    }
      
    
}

clase entrenador

public class Entrenador extends Empleados {
    
    
    private int campeonatosGanados;
    
    public Entrenador (String nombre, double sueldo, int antiguedad, int campeonatos ){
        
        super(nombre, sueldo, antiguedad);
        setCampeonatosGanados (campeonatos);
        
    }

    public int getCampeonatosGanados() {
        return campeonatosGanados;
    }

    public void setCampeonatosGanados(int campeonatosGanados) {
        this.campeonatosGanados = campeonatosGanados;
    }
    
    public double calcularEfectividad (){ // no anda
  
        return  getCampeonatosGanados ()/ getAntiguedad ();
    }
    
    public double plusSueldo (){  // no anda //
        
        // sueldo + 10% del sueldo * antiguedad //
        // suedlo + ((sueldo*10/100)* antiguedad) //
        
        // fijarme si INCLUYE o no los valores que me dan ej, si entre 1 y 4 incluye el 1 y el 4 //
        
        double aux=0;
        
        if ((getCampeonatosGanados () < 4 && getCampeonatosGanados ()> 1)) 
              aux = 5000;
        else {
            if ((getCampeonatosGanados () < 10 && getCampeonatosGanados ()> 5))
                  aux = 30000;
            else {
                if ( getCampeonatosGanados () > 10)
                   aux = 50000; 
            }    
        }
        return aux; 
           
    }

    @Override
    public String toString() {
        return "Entrenador " + super.toString() + " su salario es " + super.calcularSueldoACobrar() + " su efectividad es " + calcularEfectividad ();
    }   
    
    
}
