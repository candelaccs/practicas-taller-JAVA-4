clase jugador

public class Jugador extends Empleado {
    
    private int goles;
    private int partidos;
    
    public Jugador (String nombre, double sueldo, int antiguedad, int goles, int partidos){
        
        super (nombre, sueldo, antiguedad);
        setGoles (goles);
        setPartidos (partidos);
    }

    public int getGoles() {
        return goles;
    }

    public void setGoles(int goles) {
        this.goles = goles;
    }

    public int getPartidos() {
        return partidos;
    }

    public void setPartidos(int partidos) {
        this.partidos = partidos;
    }
    
    
    /*public double calcularEfectividad (){
        
        return (double)getGoles()/getPartidos(); // solo con el double me funciona //
    }*/
    
    public double calcularEfectividad () {
        
        double aux = (getGoles ()/ getPartidos());
        return aux;
    }
    
    public double devolverSueldo (){
        
        double aux;
        
        if ( calcularEfectividad () > 0.5) 
            aux = getSueldo(); // en cobrar sueldo se devuelve este nuevo sueldo + cobrar //
        else
            aux = 0;
        
        return aux;
          
    }

    @Override
    public String toString() {
        return "Jugador " + super.toString() + " el salario es " + super.calcularSueldoACobrar() + " su efectividad es de  " + calcularEfectividad();
    }
      
    
}

clase super empleado

public abstract class Empleado {
    
    private String nombre;
    private double sueldo;
    private int    antiguedad;
    
    
    public Empleado (String nom, double sue, int antic){
        
        setNombre (nom);
        setSueldo (sue);
        setAntiguedad (antic);
    } 

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public double getSueldo() {
        return sueldo;
    }

    public void setSueldo(double sueldo) {
        this.sueldo = sueldo;
    }

    public int getAntiguedad() {
        return antiguedad;
    }

    public void setAntiguedad(int antiguedad) {
        this.antiguedad = antiguedad;
    }
    
    /*public double calcularEfectividad (int cantidad, int total ){ // si hace lo mismo en los dos casos no hay una manera de hacerlo aca y que ya calcule? //
        
        return (total/cantidad);
        
    }*/
    
    /*public abstract double salario (); // preguntar si esta bien esto //
    public double calcularSueldoACobrar (){ // idem //
        
        return (getSueldo() + ((getSueldo()*10/100)* getAntiguedad()));
    }*/
    
    public abstract double calcularEfectividad();
    public double calcularSueldoACobrar (){
        
        return getSueldo() + ((getSueldo()*10/100)* getAntiguedad() + this.devolverSueldo());
    }

    @Override
    public String toString() {
        return  "nombre del empleado: " + nombre; 
    }

    public abstract double devolverSueldo();
    
    
}

clase entrenador // no modificado //

public class Entrenador extends Empleado {
    
    
    private int campeonatosGanados;
    
    public Entrenador (String nombre, double sueldo, int antiguedad, int campeonatos ){
        
        super(nombre, sueldo, antiguedad);
        setCampeonatosGanados (campeonatos);
        
    }

    public int getCampeonatosGanados() {
        return campeonatosGanados;
    }

    public void setCampeonatosGanados(int campeonatosGanados) {
        this.campeonatosGanados = campeonatosGanados;
    }
    
    public double calcularEfectividad (){ // no anda
        
     
        return  getCampeonatosGanados ()/ getAntiguedad ();
    }
    
    public double devolverSueldo (){  // no anda //
        
        // sueldo + 10% del sueldo * antiguedad //
        // suedlo + ((sueldo*10/100)* antiguedad) //
        
        // fijarme si INCLUYE o no los valores que me dan ej, si entre 1 y 4 incluye el 1 y el 4 //
        
        double aux= super.calcularSueldoACobrar();
        
        if ((getCampeonatosGanados () < 4 && getCampeonatosGanados ()> 1)) 
              aux = aux + 5000;
        else {
            if ((getCampeonatosGanados () < 10 && getCampeonatosGanados ()> 5))
                  aux =  aux + 30000;
            else {
                if ( getCampeonatosGanados () > 10)
                   aux =  aux + 50000; 
            }    
        }
        
        return aux; 
           
    }

    @Override
    public String toString() {
        return "Entrenador " + super.toString() + " su salario es " + devolverSueldo() + " su efectividad es " + calcularEfectividad ();
    }   
    
    
}
